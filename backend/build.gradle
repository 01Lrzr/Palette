plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext{
	snippetsDir = file('build/generated-snippets')
}

asciidoctor {
	dependsOn test
	inputs.dir snippetsDir
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

bootJar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}


repositories {
	mavenCentral()
}

dependencies {
	// jpa, querydsl
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.querydsl:querydsl-jpa'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// json
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	// aws s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'

	// oauth
	implementation 'org.springframework.boot:spring-boot-starter-security' // 암호화 기능

	implementation 'mysql:mysql-connector-java'

	// xss
	implementation 'org.apache.commons:commons-text:1.8'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.11'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'
}

test {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/gernerated/querydsl" // 해당 경로에 querydsl 폴더 생성
querydsl {
	jpa = true;
	querydslSourcesDir = querydslDir
}
sourceSets{
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}